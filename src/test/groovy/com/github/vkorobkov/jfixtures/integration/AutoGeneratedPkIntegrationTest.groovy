package com.github.vkorobkov.jfixtures.integration

import com.github.vkorobkov.jfixtures.IntId
import com.github.vkorobkov.jfixtures.testutil.H2Test
import spock.lang.Specification

import java.nio.file.Path

class AutoGeneratedPkIntegrationTest extends Specification implements H2Test {
    Path tmpDirectoryPathPk = unpackYamlToTempDirectory("pk.yml")

    void setupSpec() {
        recreateTable("friends", "NAME VARCHAR(50) DEFAULT NULL, AGE INT DEFAULT NULL")
        recreateTable("mates", "ID INT, NAME VARCHAR(50) DEFAULT NULL, AGE INT DEFAULT NULL")
        recreateTable("pals", "ID INT, NAME VARCHAR(50) DEFAULT NULL, AGE INT DEFAULT NULL")
        recreateTable("fellows", "CUSTOM_ID INT, NAME VARCHAR(50) DEFAULT NULL, AGE INT DEFAULT NULL")
    }

    void cleanup() {
        tmpDirectoryPathPk.toFile().deleteDir()
    }

    def "insert to table without pk test"() {
        when:
        executeFixtures(tmpDirectoryPathPk)

        then:
        def result = sql.rows("SELECT * FROM friends")
        result == [[NAME: "Vlad", AGE: 29]]
    }

    def "insert to table with auto generated pk test"() {
        when:
        executeFixtures(tmpDirectoryPathPk)

        then:
        def result = sql.rows("SELECT * FROM mates")
        result == [[ID: IntId.one("vlad"), NAME: "Vlad", AGE: 29]]
    }

    def "insert to table with auto generated pk when autoGeneratePk flag does not exist test"() {
        when:
        executeFixtures(tmpDirectoryPathPk)

        then:
        def result = sql.rows("SELECT * FROM pals")
        result == [[ID: IntId.one("vlad"), NAME: "Vlad", AGE: 29]]
    }

    def "insert to table with custom pk test"() {
        when:
        executeFixtures(tmpDirectoryPathPk)

        then:
        def result = sql.rows("SELECT * FROM fellows")
        result == [[CUSTOM_ID: IntId.one("semen"), NAME: "Semen", AGE: 30]]
    }
}